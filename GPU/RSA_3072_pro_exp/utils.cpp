#include "types.h"
#include "utils.h"
#include "print.h"

void types_randgen(elt ax, uint deg) 
{
	
	uint wsize = 64;
	int  i, j, E = (deg+wsize-1)/wsize, aux1 = deg % wsize;
	uint64_t aux;
	
	set_zero(ax, NI);

	E = !E ? 1: E;
	for(i = 0; i < E; i++) {
		for(j = 32; j > 0; j >>=2) {
			aux = rand();
			if (rand()>>15) aux |= 0x8000;
			ax[i] <<= 16;
			ax[i] |= aux;
		}
		
		ax[i] <<= 32;
		for(j = 32; j > 0; j >>=2) {
			aux = rand();
			if (rand()>>15) aux |= 0x8000;
			ax[i] <<= 16;
			ax[i] |= aux;
		}
	}
	if (aux1) {ax[E-1] &= ~(-(long int)((ulong)1 << aux1));}
}

void init_primes(eltr p)
{
	uint i;
	ulong primes[] = {0xFFFFFFFFFFFFFFFD, 0xFFFFFFFFFFFFFFFB, 0xFFFFFFFFFFFFFFF9, 0xFFFFFFFFFFFFFFF7, 0xFFFFFFFFFFFFFFF5, 0xFFFFFFFFFFFFFFF1, 0xFFFFFFFFFFFFFFEF, 0xFFFFFFFFFFFFFFDF, 
		0xFFFFFFFFFFFFFFDD, 0xFFFFFFFFFFFFFFD9, 0xFFFFFFFFFFFFFFD3, 0xFFFFFFFFFFFFFFD1, 0xFFFFFFFFFFFFFFCB, 0xFFFFFFFFFFFFFFC7, 0xFFFFFFFFFFFFFFC5, 0xFFFFFFFFFFFFFFC1, 
		0xFFFFFFFFFFFFFFB5, 0xFFFFFFFFFFFFFFB3, 0xFFFFFFFFFFFFFFAD, 0xFFFFFFFFFFFFFFA9, 0xFFFFFFFFFFFFFFA7, 0xFFFFFFFFFFFFFFA1, 0xFFFFFFFFFFFFFF9D, 0xFFFFFFFFFFFFFF97, 
		0xFFFFFFFFFFFFFF8F, 0xFFFFFFFFFFFFFF8B, 0xFFFFFFFFFFFFFF89, 0xFFFFFFFFFFFFFF83, 0xFFFFFFFFFFFFFF7F, 0xFFFFFFFFFFFFFF71, 0xFFFFFFFFFFFFFF6D, 0xFFFFFFFFFFFFFF67, 
		0xFFFFFFFFFFFFFF65, 0xFFFFFFFFFFFFFF5B, 0xFFFFFFFFFFFFFF53, 0xFFFFFFFFFFFFFF4D, 0xFFFFFFFFFFFFFF49, 0xFFFFFFFFFFFFFF43, 0xFFFFFFFFFFFFFF3D, 0xFFFFFFFFFFFFFF3B, 
		0xFFFFFFFFFFFFFF2F, 0xFFFFFFFFFFFFFF29, 0xFFFFFFFFFFFFFF0D, 0xFFFFFFFFFFFFFF07, 0xFFFFFFFFFFFFFF01, 0xFFFFFFFFFFFFFEFF, 0xFFFFFFFFFFFFFEF5, 0xFFFFFFFFFFFFFEE9, 
		0xFFFFFFFFFFFFFEE1, 0xFFFFFFFFFFFFFEDB, 0xFFFFFFFFFFFFFED7, 0xFFFFFFFFFFFFFED5, 0xFFFFFFFFFFFFFECB, 0xFFFFFFFFFFFFFEBD, 0xFFFFFFFFFFFFFEB9, 0xFFFFFFFFFFFFFEB7, 
		0xFFFFFFFFFFFFFEAD, 0xFFFFFFFFFFFFFEA5, 0xFFFFFFFFFFFFFE9F, 0xFFFFFFFFFFFFFE95, 0xFFFFFFFFFFFFFE93, 0xFFFFFFFFFFFFFE87, 0xFFFFFFFFFFFFFE7B, 0xFFFFFFFFFFFFFE75};
	
	for(i = 0; i < NR; i++)
	{
		p[i] = primes[i];
	}
}

void init_vectors(elt_v a[])
{
	uint i;
	
	for(i = TESTS; i--;)
	{
		types_randgen(a[i].x, DEGREE);
	}
}

void get_cs(uint c[])
{
	uint i;
	
	uint t[] = {0x3, 0x5, 0x7, 0x9, 0xB, 0xF, 0x11, 0x21, 0x23, 0x27, 0x2D, 0x2F, 0x35, 0x39, 0x3B, 0x3F, 
		0x4B, 0x4D, 0x53, 0x57, 0x59, 0x5F, 0x63, 0x69, 0x71, 0x75, 0x77, 0x7D, 0x81, 0x8F, 0x93, 0x99, 
		0x9B, 0xA5, 0xAD, 0xB3, 0xB7, 0xBD, 0xC3, 0xC5, 0xD1, 0xD7, 0xF3, 0xF9, 0xFF, 0x101, 0x10B, 0x117, 
		0x11F, 0x125, 0x129, 0x12B, 0x135, 0x143, 0x147, 0x149, 0x153, 0x15B, 0x161, 0x16B, 0x16D, 0x179, 0x185, 0x18B};
	
	for(i=0; i < NR; i++)
	{
		c[i] = t[i];
	}
}

void get_prime(ulong *l)
{
	uint i;
	ulong t[] = {0xA690F67F89197753, 0x9DB8C7E04578A3C6, 0x94CA13726DE862BD, 0x8840B92245B40C1B, 0xC10B2C8A0CE14DD9, 0xDB6388666DAB22CC, 0x90EC719B7C5FE5D5, 0x2E02F08E1DA9EFB, 
		0xC6CA54EABC01BE8E, 0xE4834AAC26492E66, 0xD04423258D0FA80E, 0x3AEA364642E140B7, 0x77E607DF7D80F3FC, 0xD6C7511C71550280, 0x3189E24AC807E54, 0x3EC8E6F80BF29BC5, 
		0x15915B13FADAB903, 0x52F44A6ECFA87736, 0x79DB0B8B79B858B0, 0xED209B614B8E9B36, 0xA1D36E8FC83C0E30, 0x12CB916BBB7BBA98, 0x8A59674FD120C4D9, 0xC42363185C47D0D3
	};
	
	for(i=NI; i--; )
	{
		l[i] = t[i];
	}
}

void get_mu(ulong *mu)
{
	uint i;
	
	ulong t[] = {0x5218EED06980AF6A, 0x79C7977CE2F50D6B, 0x39A2AE7746167113, 0x864C84A65E36CD58, 0xE38327B105C5EC71, 0x5873347B021D69D5, 
		0xE09E5E27A178BFA, 0xF275456ADC16289F, 0x45A4AC4245CDDF59, 0xF4137BB500BC54C6, 0x7870C81537EAFDDA, 0x97E0B8D6089EDAF0, 
		0x77E42D38BDC54009, 0xCFD02FF32A3254A7, 0xC0092DD3725C667B, 0x36709A8961BC72F0, 0x1705B8F8BE7B776C, 0x5F99BF1D1F3D6D61, 
		0x8B41D300E3ADB744, 0xEF620E64C0C0C287, 0x4B1E70EE98A67AD1, 0x9DC33B6E28B26810, 0x3488056394870FF6, 0x4474174183D285FC, 
		0x926D6F4DF89072E1, 0x7E2BEC7DF5402A07, 0x1558A192F8B4C5FD, 0xF9C0A7F3C3B3C381, 0x569E5F6FA6D9BBC7, 0xB441ACA60EC2748B, 
		0xE2028B4B84ED2838, 0xFF18BE6F88C28A0E, 0xD12858DE21A76211, 0x4923C06920AC00A5, 0x40A1D21EA99DA25E, 0xB548FB986C3BB578, 
		0xF5C341B03321A0E5, 0x289330F66B950510, 0x17BCCF1556E9EE75, 0xA42F47D8042AF346, 0x625CCB800E60992, 0xDB81DB0730B97709, 
		0x19AA961BA7173C29, 0xE7E4610D115A4D6A, 0x8A3927C767AEE82A, 0x516D7F0896550F57, 0x866BF84A14FB69F1, 0xB3EAFAC6259B8C29, 0x1};
	
	for(i=49; i--; )
	{
		mu[i] = t[i];
	}
}

void get_exp(rns_v *rns)
{
	uint i;
	
	ulong t[] = {0x758F2C30D06873F6, 0xD30E6755B40A4CBD, 0xCC5371A3FBEF1571, 0xFEBCEEE93A7935F0, 0xE313CD444F021A42, 0x2A5CBFD92589AB9F, 
		0xC0FF03638BC9190C, 0xEBEE3CA906C8F291, 0x2C8525DA21D99587, 0x8FB4105A1C987B70, 0x400B1578622349C5, 0xE88DCAF6F98347DE, 
		0x3B742D48992BAFB4, 0x2C65C6E9C9970933, 0xF9E49D969BD5C8C1, 0x273F03231CD30FD5, 0xEA737570103B9682, 0x14A139ED83F697B5, 
		0xD0C946DA3CE6CB1, 0x620A66F6CEB86802, 0xEF5B797428184D0F, 0xDBC017174CE0C667, 0xF9730C55C3DCB21F, 0xF6AEF0E3473FE9C};
	
	
	for(i=NI; i--; )
	{
		rns->exp[i] = t[i];
	}
}

void recoding(rns_v *rns)
{
	uint i = 0, j;
	uint g = 1;
	uint m;
	uint d, dp;
	uint k = NB;
	uint s;
	
	m = 1 << k;
	s = 64 - k;
	
	while(rns->exp[0] >= m + 1)
	{
		d = rns->exp[0] & 0xF;
		
		dp = d + g + m - 2;
		
		rns->w[i] = dp & 0xF;
		
		g = dp >> k;
		
		for(j = 0; j < NI-1; j++)
		{
			rns->exp[j] = (rns->exp[j] >> k) | (rns->exp[j+1] << s);
		}
		rns->exp[j] = rns->exp[j] >> k;
		
		i++;
	}
	
	rns->w[i] = rns->exp[0] + g - 2;
	rns->nw = i; // [0 ... n]
	
// 	printf("i: %d\n", i);
// 	
// 	printf("w:= [\n");
// 	for(j = 0; j < i; j++)
// 	{
// 		printf("%d, ", rns->w[j]);
// 	}
// 	printf("%d ];\n", rns->w[j]);
// 	exit(0);
}

void get_modp64(rns_v *rns)
{
	uint i;
	
	ulong t[] = {0x596F098076E688AD, 0x6247381FBA875C39, 0x6B35EC8D92179D42, 0x77BF46DDBA4BF3E4, 0x3EF4D375F31EB226, 0x249C77999254DD33, 0x6F138E6483A01A2A, 0xFD1FD0F71E256104, 
		0x3935AB1543FE4171, 0x1B7CB553D9B6D199, 0x2FBBDCDA72F057F1, 0xC515C9B9BD1EBF48, 0x8819F820827F0C03, 0x2938AEE38EAAFD7F, 0xFCE761DB537F81AB, 0xC1371907F40D643A, 
		0xEA6EA4EC052546FC, 0xAD0BB591305788C9, 0x8624F4748647A74F, 0x12DF649EB47164C9, 0x5E2C917037C3F1CF, 0xED346E9444844567, 0x75A698B02EDF3B26, 0x3BDC9CE7A3B82F2C};
		
	for(i=NI; i--; )
	{
		rns->modp64[i] = t[i];
	}
}
